subsystem = M1CS
component = glc

description = "The M1CS Sequencer is the software component that manages the M1CS Assemblies. It implements the high-level commands that other subsystems such as TCS and APS would send to the M1CS system. The M1CS Engineering Interface uses the same command path to the M1CS Sequencer as the TCS and APS."

receive = [
  {
    name = lifecycle
    description = """
      |Purpose: Allow the TCS to change the M1CS Lifecycle state.
      |
      |Usage: Lifecycle (message)
      |
      |Short description: Support the OSW Component Lifecycle state changes.
      |
      |Detailed description: The M1CS_Lifecycle command is used to startup, shutdown and restart the M1CS system. The OSW defines a set of standard software states and transitions for all software components.
    """
    requirements = [None]

    args = [
      {
        name = state
        description = "The target lifecycle state."
        enum = [initalize, startup, shutdown, uninitialize]
      }
    ]
  }
  {
    name = setObsMode
    description = """
      |Purpose: Allow TCS to change the M1CS Operational mode after system startup.
      |
      |Usage: setOpsMode (mode)
      |
      |Short description: Change the M1CS Operations Mode.
      |
      |Detailed description: The M1CS control system implements three operating modes in order to support the M1CS Operational Concepts.
      |
      |Whenever the M1CS software lifecycle enters or exits the RUNNING state the M1CS Operating Mode is changed to HALTED.
      |In HALTED mode both the global control loop and the actuator internal control loops are open. The M1CS software remains in HALTED mode
      |until it is sent a command to change to either IDLE or TRACK. In IDLE the actuator control loops will be enabled and the actuators will
      |maintain their commanded positions. IDLE will also initiate the sensor readout, and the segment controllers will start sending the 50 Hz data
      |to the M1CS RTC. Upon changing to TRACK mode, the M1CS RTC will close the global control loop to begin calculating new commanded positions for
      |the actuators to correct the shape of the M1.
    """
    requirements = [None]
    args = [
      {
        name = mode
        description = "The target mode."
        enum = [HALT, IDLE, TRACK]
      }
    ]
  }
  {
    name = clearOuterLoopState
    description = """
      |Purpose: Allow TCS to reset the outer loop control targets when it changes between the AGWFS and NIFIRAOS.

      |Usage: clearOuterLoopState

      |Short description: Reset the state information maintained in the outer loop controller.
      |
      |Detailed description: During operations the TCS publishes the M1 Zernike error and focus mode to be applied to the current
      |M1 mirror shape. Internally the M1CS implements a low-bandwidth outer loop controller in order to determine the correct shape.
      |clearOuterLoopState will reset any internal state information previously calculated by the outer loop controller.
      |
      |Comments: Might want to parameterize the ability to reset individual state information variables in the future.
    """
    requirements = [REQ-2-TCS-2380]
    args = [
      {
        name = track
        description = "Indicated on or off with on/off or true/false"
        enum = [on, off, true, false]
      }
    ]
  }
  {
    name = saveActPos
    description = """
      | Purpose: Allow the TCS to update the M1CS Actuator Lookup Table for the current zenith angle.
      |
      | Usage: saveActPos (duration)
      |
      | Short description: Determine the average actuator position over the specified duration.
      |
      | Detailed description: The M1CS uses an Actuator Lookup Table that contains the desired commanded position for each actuator
      | for a given zenith angle. saveActPos updates the Lookup Table for the current zenith angle.
      |
      | Comments: The current operations concept has the Actuator LUT being measured every 5 degrees of zenith angle
      | (during daytime operations). To update the table the TCS needs to move to the given zenith angles and inform the
      | M1CS to measure the new positions. Note this operation should be carried out while other telescope operations are not being performed.
    """
    requirements = [None]
    args = [
      {
        name = period
        description = "number of seconds of data to average"
        type = integer
        minimum = 1
        maximum = 300
        units = seconds
      }
    ]
  }


  {
    name = getAMatrix
    description = """
      |Purpose: Allow the TCS to update the interaction matrix, a.k.a. A-matrix for the current zenith angle.
      |
      |Usage: genAMatrix (duration)
      |
      |Short description: Measure the interaction matrix at the current zenith angle.
      |
      |Detailed description: The M1CS maintains a table of A matrices as a function of zenith angle. In order to update the
      |A matrices it implements an RGB algorithm described in the M1CS Operations Concept at various zenith angles. genAMatrix
      |implements the RGB algorithm at the current zenith angle.
      |
      |Comments: The current operations concept has the A matrix being measured every 5 degrees of zenith angle (during the daytime operations).
      |To do so the TCS needs to move to the TBD zenith angles and inform the M1CS to measure the interaction matrix.
      |
      |Note this operation should be carried out while other telescope operations are not being performed.
      |Might want to modify the parameters to this command later in order to support different algorithms to measure the interaction matrix.
    """
    requirements = [None]
    args = [
      {
        name = period
        description = "number of seconds to average over"
        type = integer
        minimum = 1
        maximum = 300
        units = seconds
      }
    ]
  }

  {
    name = enableDisableSegment
    description = """
      |Purpose: Allow the TCS operator to add/remove segments from the global loop control.
      |
      |Usage: enableSegment (segment_location) (true/false)
      |
      |Short description: enable/disable control of a given segment.
      |
      |Detailed description: enableSegment will reinitialize the specified segment and update the matrices to place it back under
      |control of the global loop controller. disableSegment will remove the segment from global loop controller and position it to
      |minimize image artifacts during operations.
      |
      |Comments: These commands can only be carried out while the M1CS operational mode is HALTED or IDLE. This function may be moved to
      |the M1CS engineering interface in the future.
    """
    requirements = [None]
    args = [
      {
        name = segmentId
        description = "number of seconds to average over"
        type = integer
        minimum = 1
        maximum = 492
      }
      {
        name = enable
        description = "enable (true) or disable (false) the segment based on value"
        type = boolean
      }
    ]
  }

  {
    name = enableDisableActuator
    description = """
      |Purpose: Allow the TCS operator to add/remove actuators from the global loop control.
      |
      |Usage: enableActuator (actuator id) (true/false)
      |
      |Short description: enable/disable control of a given actuator.
      |
      |Detailed description: enableActuator will reinitialize the specified actuator and update the matrices to place it
      |back under control of the global loop controller. disableActuator will remove the actuator from global loop controller.
      |
      |Comments: These commands can only be carried out while the M1CS operational mode is HALTED or IDLE. This function may be
      |moved to the M1CS engineering interface in the future. Need to determine what is the best global loop control approach
      |for a segment when an actuator fails.
    """
    requirements = [None]
    args = [
      {
        name = segmentId
        description = "actuator id to enable or disable"
        type = integer
        minimum = 1
        maximum = 1476
      }
      {
        name = enable
        description = "enable (true) or disable (false) the actuator based on value"
        type = boolean
      }
    ]
  }

  {
    name = enableDisableSensor
    description = """
      |Purpose: Allow the TCS operator to add/remove sensors from the global loop control.
      |
      |Usage: enableSensor (sensor id) (true/false)
      |
      |Short description: enable/disable use of the measurements made by a given sensor.
      |
      |Detailed description: enableSensor will reinitialize the specified sensor and update the global loop controller
      |matrices so that the measurements are used. disableSensor will update the global loop controller matrices so that
      |it does not use the given sensorâ€™s measurements.
      |
      |Comments: These commands can only be carried out while the M1CS operational mode is HALTED or IDLE.
      |This function may be moved to the M1CS engineering interface in the future.
    """
    requirements = [None]
    args = [
      {
        name = sensorId
        description = "sensor id to enable or disable"
        type = integer
        minimum = 1
        maximum = 2772
      }
      {
        name = enable
        description = "enable (true) or disable (false) the sensor based on value"
        type = boolean
      }
    ]
  }

  {
    name = loggingMode
    description = """
      |Purpose: Control what data the M1CS records to the Engineering Database.
      |
      |Usage: loggingMode (mode)
      |
      |Short description: Configure what data the M1CS stores in the Engineering Database.
      |
      |Detailed description: The M1CS has the ability to measure and record many different data products.
      |In order to reduce the data storage requirements and still implement requirements such as diagnostics and trend analysis the
      |M1CS operations concepts specify a number of different data products to be recorded during various operations.
      |
      |Data valid range(s): TBD.
      |
      |Return value(s): Completed.
      |
      |Comments: It is 'to be done' if the TCS will require this command but at a minimum it will be used by the M1CS Engineering Interface.
      |These data sets include: normal 1 Hz datasets, daily 400Hz diagnostic datasets. sensor calibration datasets, interaction
      |matrix and actuator lookup table measurement datasets, M1CS system id datasets, M1CS buffered actuator datasets,
      |and actuator system id datasets.
    """
    requirements = [None]
    args = [
      {
        name = mode
        description = "sensor id to enable or disable"
        type = integer
        minimum = 1
        maximum = 2772
      }
    ]
  }

  {
    name = genCalibCoeff
    description = """
      |Purpose: Allow an operator to generate new sensor calibration coefficients from a list of saved raw sensor reading datasets.
      |
      |Usage: genCalibCoeff
      |
      |Short description: Generate a new set of sensor calibration coefficients.
      |
      |Detailed description: Create a new set of sensor calibration coefficients from a list of aligned raw sensor reading
      |datasets. The raw sensor datasets should be from different zenith angles, and ideally temperatures.
      |
      |Return value(s): sensor calibration coefficient id.
      |
      |Typical time for command to execute: TBD
      |
      |Maximum time for command to execute: TBD â€“ 5 minutes? Comments: None
    """
    requirements = [None]
    args = [
      {
        name = locaton
        description = "installed segment location (0-492)"
        type = integer
        minimum = 0
        maximum = 492
      }
      {
        name = algorithm
        description = "algorithm TBD"
        enum = [ algo1, algo2, etc]
      }
      {
        name = calibDatasetIds
        description = "a list of indexes for sensor calibration dataset tables to use"
        type = array
        dimensions: [20]
        items = {
           name = ids
           type = integer
        }
      }
    ]
  }
]


