description = "Optional overview of commands goes here."

configurations = [

  {
    name = "NACQNHRWFS_NACQ_POSITION"
    description = """
    [INT-NFIRAOS-AOESW-0210] NACQNHRWFS_NACQ_POSITION command will move the NACQ/NHRWFS
    stage to the nominal configuration for the NACQ plus any specified offsets.
    """
//    requirements = ["First requirement for cmd1", "Second requirement for cmd1"]
    requiredArgs = [x, y, z]

    args = [
      {
        name = x
        description = "NACQ x axis offset"
        type = number
        units = mm
      }
      {
        name = y
        description = "NACQ y axis offset"
        type = number
        units = mm
      }
      {
        name = z
        description = "NACQ z axis offset"
        type = number
        units = mm
      }
    ]
  }

  {
    name = "NACQNHRWFS_NACQ_DETECTOR"
    description = """
    [INT-NFIRAOS-AOESW-0215] NACQNHRWFS_NACQ_DETECTOR command will configure the exposure parameters for the NACQ.
    """
    requiredArgs = [integrationTime]

    args = [
      {
        name = integrationTime
        description = "integration time"
        type = number
        units = seconds
      }
    ]
  }

  {
    name = "NACQNHRWFS_NACQ_MAGNIFIER_STATE"
    description = """
    [INT-NFIRAOS-AOESW-0220] NACQNHRWFS_NACQ_MAGNIFIER_STATE command will deploy/extract the NACQ magnifier stage.
    """
    requiredArgs = [deployState]

    args = [
      {
        name = deployState
        description = "deploy state of the NACQ magnifier"
        enum = [deploy, extract]
      }
    ]
  }

  {
    name = "NACQNHRWFS_NACQ_READ_CONTINUOUS"
    description = """
    [INT-NFIRAOS-AOESW-0230] NACQNHRWFS_NACQ_READ_CONTINUOUS command will enable/disable the continuous read mode of the NACQ.
    A read period of 0 or less will disable the continuous read mode.
    """
    requiredArgs = [x, y, z]

    args = [
      {
        name = readPeriod
        description = "read period"
        type = number
        units = seconds
      }
    ]
  }


  {
    name = "CONFIG_MODE "
    description = """
    [INT-NFIRAOS-AOESW-3315] CONFIG_MODE command will (re)configure the RTC for an observation
    and stop any active processing. The valid modes are LGS with OIWFS, NGS with OIWFS, NGS without OIWFS,
    Seeing Limited with OIWFS and Seeing Limited without OIWFS.
    """
    requirements = ["Must be initialized"]
    requiredArgs = [name, obsMode, oiwfsUsed]

    args = [
      {
        name = instrument
        description = "Which instrument (IRIS, IRMS, TBD)"
        type = string // XXX TBD
      }
      {
        name = obsMode
        description = "Which observation mode (LGS, NGS or Seeing Limited)"
        enum = [LGS, NGS, SeeingLimited]
      }
      {
        name = oiwfsUsed
        description = "OIWFS used"
        type = boolean
      }
    ]
  }

  {
    name = "CONFIG_ALL "
    description = """
    [INT-NFIRAOS-AOESW-3320] CONFIG_ALL command (re)initializes all RTC processes from: the default configuration
    from the RPG, pre-defined configuration files or previous parameter values for a given configuration.
    This command will stop any active processing.
    """
    requirements = ["Must be configured"]
    requiredArgs = [config]

    args = [
      {
        name = config // XXX ???
        description = "where to find the default configuration values"
        type = string // XXX TBD
      }
    ]
  }

  {
    name = "START_ALL_LOOPS"

    description = """
    [INT-NFIRAOS-AOESW-3330] START_ALL_LOOPS command starts the higher-order closed loop in the configured mode.
    This includes wavefront pixel processing, wavefront reconstruction, wavefront corrector control.
    All configurable states like: applying real time update of the wavefront reconstruction parameters from
    the RPG, the turbulence parameters computation and the telescope mode offload, are not affected by this
    command, they must be (re)set manually if non-standard operation is desired.
    """

    // XXX Maybe this should be a table of [key, value, optional[condition]]?
    requirements = [
      "configured = true",
      "recon.processing != UNREADY",
      "wc.configured = true",
      "wc.processing != UNREADY",
      "if mode == LGS: ...",
      "lgsWfs.processing != UNREADY",
      "twfs.processing != UNREADY",
      "refVect.initialized.lgs = true"
    ]
    requiredArgs = [tbd]

    args = [
      {
        name = tbd // XXX TBD
        type = string
        description = "TBD"
      }
    ]
  }

]
